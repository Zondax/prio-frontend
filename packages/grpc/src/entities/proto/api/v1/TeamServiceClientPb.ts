/**
 * @fileoverview gRPC-Web generated client stub for proto.api.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.1
// source: proto/api/v1/team.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_api_v1_team_pb from '../../../proto/api/v1/team_pb'; // proto import: "proto/api/v1/team.proto"


export class TeamServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateTeam = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/CreateTeam',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.CreateTeamRequest,
    proto_api_v1_team_pb.CreateTeamResponse,
    (request: proto_api_v1_team_pb.CreateTeamRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.CreateTeamResponse.deserializeBinary
  );

  createTeam(
    request: proto_api_v1_team_pb.CreateTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.CreateTeamResponse>;

  createTeam(
    request: proto_api_v1_team_pb.CreateTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.CreateTeamResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.CreateTeamResponse>;

  createTeam(
    request: proto_api_v1_team_pb.CreateTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.CreateTeamResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/CreateTeam',
        request,
        metadata || {},
        this.methodDescriptorCreateTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/CreateTeam',
    request,
    metadata || {},
    this.methodDescriptorCreateTeam);
  }

  methodDescriptorGetTeam = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/GetTeam',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.GetTeamRequest,
    proto_api_v1_team_pb.GetTeamResponse,
    (request: proto_api_v1_team_pb.GetTeamRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.GetTeamResponse.deserializeBinary
  );

  getTeam(
    request: proto_api_v1_team_pb.GetTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.GetTeamResponse>;

  getTeam(
    request: proto_api_v1_team_pb.GetTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.GetTeamResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.GetTeamResponse>;

  getTeam(
    request: proto_api_v1_team_pb.GetTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.GetTeamResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/GetTeam',
        request,
        metadata || {},
        this.methodDescriptorGetTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/GetTeam',
    request,
    metadata || {},
    this.methodDescriptorGetTeam);
  }

  methodDescriptorSearchTeams = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/SearchTeams',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.SearchTeamsRequest,
    proto_api_v1_team_pb.SearchTeamsResponse,
    (request: proto_api_v1_team_pb.SearchTeamsRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.SearchTeamsResponse.deserializeBinary
  );

  searchTeams(
    request: proto_api_v1_team_pb.SearchTeamsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.SearchTeamsResponse>;

  searchTeams(
    request: proto_api_v1_team_pb.SearchTeamsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.SearchTeamsResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.SearchTeamsResponse>;

  searchTeams(
    request: proto_api_v1_team_pb.SearchTeamsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.SearchTeamsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/SearchTeams',
        request,
        metadata || {},
        this.methodDescriptorSearchTeams,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/SearchTeams',
    request,
    metadata || {},
    this.methodDescriptorSearchTeams);
  }

  methodDescriptorUpdateTeam = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/UpdateTeam',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.UpdateTeamRequest,
    proto_api_v1_team_pb.UpdateTeamResponse,
    (request: proto_api_v1_team_pb.UpdateTeamRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.UpdateTeamResponse.deserializeBinary
  );

  updateTeam(
    request: proto_api_v1_team_pb.UpdateTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.UpdateTeamResponse>;

  updateTeam(
    request: proto_api_v1_team_pb.UpdateTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.UpdateTeamResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.UpdateTeamResponse>;

  updateTeam(
    request: proto_api_v1_team_pb.UpdateTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.UpdateTeamResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/UpdateTeam',
        request,
        metadata || {},
        this.methodDescriptorUpdateTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/UpdateTeam',
    request,
    metadata || {},
    this.methodDescriptorUpdateTeam);
  }

  methodDescriptorDeleteTeam = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/DeleteTeam',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.DeleteTeamRequest,
    proto_api_v1_team_pb.DeleteTeamResponse,
    (request: proto_api_v1_team_pb.DeleteTeamRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.DeleteTeamResponse.deserializeBinary
  );

  deleteTeam(
    request: proto_api_v1_team_pb.DeleteTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.DeleteTeamResponse>;

  deleteTeam(
    request: proto_api_v1_team_pb.DeleteTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.DeleteTeamResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.DeleteTeamResponse>;

  deleteTeam(
    request: proto_api_v1_team_pb.DeleteTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.DeleteTeamResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/DeleteTeam',
        request,
        metadata || {},
        this.methodDescriptorDeleteTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/DeleteTeam',
    request,
    metadata || {},
    this.methodDescriptorDeleteTeam);
  }

  methodDescriptorSearchMembers = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/SearchMembers',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.SearchMembersRequest,
    proto_api_v1_team_pb.SearchMembersResponse,
    (request: proto_api_v1_team_pb.SearchMembersRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.SearchMembersResponse.deserializeBinary
  );

  searchMembers(
    request: proto_api_v1_team_pb.SearchMembersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.SearchMembersResponse>;

  searchMembers(
    request: proto_api_v1_team_pb.SearchMembersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.SearchMembersResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.SearchMembersResponse>;

  searchMembers(
    request: proto_api_v1_team_pb.SearchMembersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.SearchMembersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/SearchMembers',
        request,
        metadata || {},
        this.methodDescriptorSearchMembers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/SearchMembers',
    request,
    metadata || {},
    this.methodDescriptorSearchMembers);
  }

  methodDescriptorAddMember = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/AddMember',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.AddMemberRequest,
    proto_api_v1_team_pb.AddMemberResponse,
    (request: proto_api_v1_team_pb.AddMemberRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.AddMemberResponse.deserializeBinary
  );

  addMember(
    request: proto_api_v1_team_pb.AddMemberRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.AddMemberResponse>;

  addMember(
    request: proto_api_v1_team_pb.AddMemberRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.AddMemberResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.AddMemberResponse>;

  addMember(
    request: proto_api_v1_team_pb.AddMemberRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.AddMemberResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/AddMember',
        request,
        metadata || {},
        this.methodDescriptorAddMember,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/AddMember',
    request,
    metadata || {},
    this.methodDescriptorAddMember);
  }

  methodDescriptorUpdateMemberRole = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/UpdateMemberRole',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.UpdateMemberRoleRequest,
    proto_api_v1_team_pb.UpdateMemberRoleResponse,
    (request: proto_api_v1_team_pb.UpdateMemberRoleRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.UpdateMemberRoleResponse.deserializeBinary
  );

  updateMemberRole(
    request: proto_api_v1_team_pb.UpdateMemberRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.UpdateMemberRoleResponse>;

  updateMemberRole(
    request: proto_api_v1_team_pb.UpdateMemberRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.UpdateMemberRoleResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.UpdateMemberRoleResponse>;

  updateMemberRole(
    request: proto_api_v1_team_pb.UpdateMemberRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.UpdateMemberRoleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/UpdateMemberRole',
        request,
        metadata || {},
        this.methodDescriptorUpdateMemberRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/UpdateMemberRole',
    request,
    metadata || {},
    this.methodDescriptorUpdateMemberRole);
  }

  methodDescriptorRemoveMember = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/RemoveMember',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.RemoveMemberRequest,
    proto_api_v1_team_pb.RemoveMemberResponse,
    (request: proto_api_v1_team_pb.RemoveMemberRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.RemoveMemberResponse.deserializeBinary
  );

  removeMember(
    request: proto_api_v1_team_pb.RemoveMemberRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.RemoveMemberResponse>;

  removeMember(
    request: proto_api_v1_team_pb.RemoveMemberRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.RemoveMemberResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.RemoveMemberResponse>;

  removeMember(
    request: proto_api_v1_team_pb.RemoveMemberRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.RemoveMemberResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/RemoveMember',
        request,
        metadata || {},
        this.methodDescriptorRemoveMember,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/RemoveMember',
    request,
    metadata || {},
    this.methodDescriptorRemoveMember);
  }

  methodDescriptorCanAccessTeam = new grpcWeb.MethodDescriptor(
    '/proto.api.v1.TeamService/CanAccessTeam',
    grpcWeb.MethodType.UNARY,
    proto_api_v1_team_pb.CanAccessTeamRequest,
    proto_api_v1_team_pb.CanAccessTeamResponse,
    (request: proto_api_v1_team_pb.CanAccessTeamRequest) => {
      return request.serializeBinary();
    },
    proto_api_v1_team_pb.CanAccessTeamResponse.deserializeBinary
  );

  canAccessTeam(
    request: proto_api_v1_team_pb.CanAccessTeamRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_api_v1_team_pb.CanAccessTeamResponse>;

  canAccessTeam(
    request: proto_api_v1_team_pb.CanAccessTeamRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.CanAccessTeamResponse) => void): grpcWeb.ClientReadableStream<proto_api_v1_team_pb.CanAccessTeamResponse>;

  canAccessTeam(
    request: proto_api_v1_team_pb.CanAccessTeamRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_api_v1_team_pb.CanAccessTeamResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/proto.api.v1.TeamService/CanAccessTeam',
        request,
        metadata || {},
        this.methodDescriptorCanAccessTeam,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/proto.api.v1.TeamService/CanAccessTeam',
    request,
    metadata || {},
    this.methodDescriptorCanAccessTeam);
  }

}

