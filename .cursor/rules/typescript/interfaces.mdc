---
description: Rules and best practices for TypeScript interfaces
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: false
---
# TypeScript Interface Guidelines

## Interface Extension

- When extending interfaces, you cannot weaken property types (e.g., making required properties optional)
- Use `Omit` to remove properties from the base type before extending if you need to redefine them with weaker types
- Example: To make a required property optional in an extended interface, first `Omit` it from the base type, then add it back as optional

## Interface Design

- Keep interfaces focused and single-purpose
- Use composition over inheritance when possible
- Prefer interfaces over type aliases for object types
- Use readonly for properties that shouldn't change after initialization
- Consider using mapped types for derived interfaces
- Use utility types (Partial, Pick, Omit) to create variations of interfaces
- Document complex interfaces with JSDoc comments
- Use generics to make interfaces more flexible and reusable
- Consider using branded types for type-safe identifiers 