---
description: Rules and best practices for floating settings panel
globs: ["**/components/settings/**/*", "**/components/floating-settings/**/*"]
alwaysApply: false
---
# Floating Settings Panel Guidelines

## Core Concepts

- The FloatingSettingsPanel provides a frontend-only way to add page-specific settings without persisting to the backend
- Components register their settings controls using the useFloatingSettings() hook
- Settings are displayed in a floating panel that can be opened/closed with an icon in the bottom-right corner
- The panel automatically appears only when a page has registered settings
- Layout-level integration through the FloatingSettingsProvider in the app layout
- Settings are reset when navigating away from the page (they're stored in component state only)

## System Architecture

- The floating settings system consists of:
  - `FloatingSettingsProvider`: Context provider that must wrap components using floating settings
  - `FloatingSettingsPanel`: The UI panel that displays registered settings
  - `useFloatingSettings()`: Hook for registering settings from any component
- Ensure the provider and panel are included in the appropriate layout:
  - App layout (`apps/web/app/(app)/layout.tsx`) for application pages
  - Dev layout (`apps/web/app/dev/layout.tsx`) for development pages
- Settings registered with `useFloatingSettings()` will automatically appear in the floating panel

## Development Integration

- For development pages in `/dev` directory, implement debug panels as separate files co-located with the page they debug
  - Example: `/dev/virtual/page-debug.tsx` alongside `/dev/virtual/page.tsx`
- Debug panels should be implemented as null-rendering components that register with the floating settings panel system
  - The component should return `null` and use `useFloatingSettings()` to register controls
  - Important: `FloatingSettingsProvider` must be present in the layout (either app layout or dev layout)
- Use detailed controls in development mode, cleaner interfaces in production
- Organize controls in logical sections (e.g., Grid Controls, Spacing, Options)
- Ensure changes in debug panels immediately reflect in the components being tested 