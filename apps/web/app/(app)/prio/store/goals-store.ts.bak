import { create } from 'zustand'
import { devtools } from 'zustand/middleware'
import type { Goal } from './prio-mock-data'
import { GOALS } from './prio-mock-data'

interface GoalsState {
  goals: Record<string, Goal>
  getGoal: (id: string) => Goal | undefined
  getActiveGoals: () => Goal[]
  getGoalsByType: (type: 'individual' | 'team') => Goal[]
  getGoalsByStatus: (status: 'active' | 'planning' | 'completed') => Goal[]
  addGoal: (goal: Goal) => void
  updateGoal: (id: string, updates: Partial<Goal>) => void
  removeGoal: (id: string) => void
  updateGoalProgress: (id: string, progress: number) => void
}

export const useGoalsStore = create<GoalsState>()(
  devtools(
    (set, get) => ({
      goals: GOALS,

      getGoal: (id) => get().goals[id],

      getActiveGoals: () => {
        const { goals } = get()
        return Object.values(goals).filter((goal) => goal.status === 'active')
      },

      getGoalsByType: (type) => {
        const { goals } = get()
        return Object.values(goals).filter((goal) => goal.type === type)
      },

      getGoalsByStatus: (status) => {
        const { goals } = get()
        return Object.values(goals).filter((goal) => goal.status === status)
      },

      addGoal: (goal) =>
        set((state) => ({
          goals: {
            ...state.goals,
            [goal.id]: goal,
          },
        })),

      updateGoal: (id, updates) =>
        set((state) => ({
          goals: {
            ...state.goals,
            [id]: {
              ...state.goals[id],
              ...updates,
            },
          },
        })),

      removeGoal: (id) =>
        set((state) => {
          const { [id]: _removed, ...rest } = state.goals
          return { goals: rest }
        }),

      updateGoalProgress: (id, progress) =>
        set((state) => ({
          goals: {
            ...state.goals,
            [id]: {
              ...state.goals[id],
              progress,
            },
          },
        })),
    }),
    {
      name: 'goals-store',
    }
  )
)
