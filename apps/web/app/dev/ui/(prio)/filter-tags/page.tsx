'use client'

import { getFilterTagColor, getFilterTagIcon } from '@/components/filterbar/filter-tags'
import { Badge } from '@/components/ui/badge'
import { FilterTagType } from '@prio-state/stores/event' // Assuming FilterTagType is available here

export default function FilterTagsPage() {
  const componentSpacing = { marginRight: '1rem', marginBottom: '1rem' }

  const exampleTagTypes: FilterTagType[] = [
    FilterTagType.FILTER_TAG_TYPE_LOCATION,
    FilterTagType.FILTER_TAG_TYPE_TIME,
    FilterTagType.FILTER_TAG_TYPE_DATE,
    FilterTagType.FILTER_TAG_TYPE_CATEGORY,
    FilterTagType.FILTER_TAG_TYPE_KEYWORD,
    FilterTagType.FILTER_TAG_TYPE_UNSPECIFIED,
  ]

  // Helper to get a string representation of the enum key
  const getFilterTagTypeName = (type: FilterTagType): string => {
    return Object.keys(FilterTagType)[Object.values(FilterTagType).indexOf(type)] || 'UNKNOWN_TYPE'
  }

  return (
    <div style={{ padding: '1rem' }}>
      <h1>Prio UI - FilterTags Utilities</h1>

      <div style={{ marginBottom: '2rem' }}>
        <h2>Icon and Color Examples</h2>
        <div style={{ display: 'flex', flexWrap: 'wrap' }}>
          {exampleTagTypes.map((type) => {
            const icon = getFilterTagIcon(type)
            const colorClass = getFilterTagColor(type) // This will be a string like 'flag-blue'
            const tagName = getFilterTagTypeName(type)

            // For demonstration, we apply a background color class directly.
            // In a real scenario, ensure Tailwind can find these classes (e.g. via safelisting)
            // or use inline styles if the color values are dynamic and not predefined Tailwind classes.
            // The filterTagColorMap seems to return class names (e.g., 'flag-blue').
            // We'll use a Badge for display and try to use the color class.
            // Note: Tailwind needs to know about these 'flag-*'. If they are not working, it means
            // these classes are not generated by Tailwind. The comment in filter-tags.tsx indicates this.

            return (
              <div key={type} style={{ ...componentSpacing, display: 'flex', alignItems: 'center' }}>
                <Badge
                  variant="outline"
                  // className={colorClass} // This might not work if Tailwind doesn't generate these flag-* classes
                  style={
                    {
                      // Attempting to provide a visual cue even if full styling doesn't apply
                      // borderColor: colorClass.split('-')[1] || 'gray',
                      // backgroundColor: `${colorClass.split('-')[1]}1A` // very light version
                      // The above style attempts are just placeholders. Proper styling depends on how 'flag-*', are defined.
                    }
                  }
                >
                  <span style={{ marginRight: '0.5rem' }}>{icon}</span>
                  {tagName} (Color: {colorClass})
                </Badge>
              </div>
            )
          })}
        </div>
        <p style={{ marginTop: '1rem', fontSize: '0.8rem', color: 'gray' }}>
          Note: The `flag-*` color classes might not render correctly if not properly configured in Tailwind CSS. The `filter-tags.tsx` file
          mentions a TODO for this.
        </p>
      </div>

      {/* Add more examples as needed */}
    </div>
  )
}
